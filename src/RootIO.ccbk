#include "RootIO.hh"
#include "G4SystemOfUnits.hh"

#include "TFile.h"
#include "TTree.h"
#include "TH2D.h"
#include "TAxis.h"

RootIO* RootIO::fInstance = nullptr;

RootIO* RootIO::Instance() {
    if (!fInstance) {
        fInstance = new RootIO();
    }
    return fInstance;
}

RootIO::RootIO()
    : fFile(nullptr), fTree(nullptr) 
{
    // Initialize 2D histogram (safely detached from global ROOT directory)
    hXY = new TH2D("hXY", "XY Energy Deposition", 100, -50, 50, 100, -50, 50);
    hXY->SetDirectory(nullptr);  // Prevent ROOT from auto-ownership
    hXY->GetXaxis()->SetTitle("X [mm]");
    hXY->GetYaxis()->SetTitle("Y [mm]");
}

RootIO::~RootIO() {
    Write(); // Final write before cleanup
    if (hXY) delete hXY;
    if (fFile) {
        fFile->Close();
        delete fFile;
    }
}

void RootIO::SetFile(TFile* file) {
    fFile = file;
    if (!fFile) return;

    fFile->cd();  // Ensure file is active
    fTree = new TTree("Hits", "Per-event hit information");

    fTree->Branch("edep", &fEdepVec);
    fTree->Branch("x", &fXVec);
    fTree->Branch("y", &fYVec);
    fTree->Branch("z", &fZVec);
}

void RootIO::SaveHit(G4double edep, G4ThreeVector pos) {
    fEdepVec.push_back(edep);
    fXVec.push_back(pos.x() / mm);
    fYVec.push_back(pos.y() / mm);
    fZVec.push_back(pos.z() / mm);
    if (hXY) hXY->Fill(pos.x() / mm, pos.y() / mm, edep);  // Fill 2D histogram
}

void RootIO::FillEvent() {
    if (fTree) {
        fTree->Fill();  // Store all hits for current event
    }
}

void RootIO::ClearEvent() {
    fEdepVec.clear();
    fXVec.clear();
    fYVec.clear();
    fZVec.clear();
}

void RootIO::Write() {
    if (fFile) {
        fFile->cd();
        if (fTree) fTree->Write();
        if (hXY)   hXY->Write("", TObject::kOverwrite);  // Overwrite existing
    }
}

